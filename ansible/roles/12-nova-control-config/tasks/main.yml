---
- name: Create {{ nova_api_db }} database
  mysql_db:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: "{{ nova_api_db }}"
    state: present

- name: Set mysql user privileges on {{ nova_api_db }} to nova@localhost
  mysql_user:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_db_user }}'
    priv: '{{ nova_api_db }}.*:ALL'
    append_privs: yes
    password: "{{ nova_db_pass }}"
    host: 'localhost'
    state: present

- name: Set mysql user privileges on {{ nova_api_db }} to nova@'%'
  mysql_user:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_db_user }}'
    priv: '{{ nova_api_db }}.*:ALL'
    append_privs: yes
    password: "{{ nova_db_pass }}"
    host: '%'
    state: present

- name: Create {{ nova_db }} database
  mysql_db:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_db }}'
    state: present

- name: Set mysql user privileges on {{ nova_db }} to nova@localhost
  mysql_user:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_db_user }}'
    priv: '{{ nova_db }}.*:ALL'
    append_privs: yes
    password: "{{ nova_db_pass }}"
    host: 'localhost'
    state: present

- name: Set mysql user privileges on {{ nova_db }} to nova@'%'
  mysql_user:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_db_user }}'
    priv: '{{ nova_db }}.*:ALL'
    append_privs: yes
    password: "{{ nova_db_pass }}"
    host: '%'
    state: present

- name: Create {{ nova_cell0_db }} database
  mysql_db:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_cell0_db }}'
    state: present

- name: Set mysql user privileges on {{ nova_cell0_db }} to nova@localhost
  mysql_user:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_db_user }}'
    priv: '{{ nova_cell0_db }}.*:ALL'
    append_privs: yes
    password: "{{ nova_db_pass }}"
    host: 'localhost'
    state: present

- name: Set mysql user privileges on {{ nova_cell0_db }} nova@'%'
  mysql_user:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_db_user }}'
    priv: '{{ nova_cell0_db }}.*:ALL'
    append_privs: yes
    password: "{{ nova_db_pass }}"
    host: '%'
    state: present

- name: Create {{ nova_placement_db }} database
  mysql_db:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: "{{ nova_placement_db }}"
    state: present

- name: Set mysql user privileges on {{ nova_placement_db }} to nova@'localhost'
  mysql_user:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_db_user }}'
    priv: '{{ nova_placement_db }}.*:ALL'
    append_privs: yes
    password: "{{ nova_db_pass }}"
    host: 'localhost'
    state: present

- name: Set mysql user privileges on {{ nova_placement_db }} to nova@'%'
  mysql_user:
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: "{{ mariaDB_user }}"
    login_password: "{{ mariaDB_pass }}"
    name: '{{ nova_db_user }}'
    priv: '{{ nova_placement_db }}.*:ALL'
    append_privs: yes
    password: "{{ nova_db_pass }}"
    host: '%'
    state: present

- name: Check if nova and placement users already exist
  shell: "source ~/admin-openrc && openstack user list"
  register: user_list

- name: Create user nova
  shell: "source ~/admin-openrc && openstack user create --domain default --project service --password {{ nova_os_pass }} nova"
  when: user_list.stdout.find('nova') == -1

- name: Check if nova user has admin role
  shell: "source ~/admin-openrc && openstack role assignment list --names"
  register: role_asssignment

- name: Add admin role to nova user
  shell: "source ~/admin-openrc && openstack role add --project service --user nova admin"
  when: role_asssignment.stdout.find('nova@Default') == -1

- name: Check if nova service already exists
  shell: "source ~/admin-openrc && openstack service list"
  register: nova_service

- name: Create nova service
  shell: 'source ~/admin-openrc && openstack service create --name nova --description "OpenStack Compute" compute'
  when: nova_service.stdout.find('compute') == -1

- name: Check if endpoints already exist
  shell: "source ~/admin-openrc && openstack endpoint list"
  register: endpoint

- name: Create nova public endpoint
  shell: "source ~/admin-openrc && openstack endpoint create --region RegionOne compute public http://{{ hostvars[groups['control'][0]].ansible_host }}:8774/v2.1"
  when: endpoint.stdout.find(':8774') == -1

- name: Create nova internal endpoint
  shell: "source ~/admin-openrc && openstack endpoint create --region RegionOne compute internal http://{{ hostvars[groups['control'][0]].ansible_host }}:8774/v2.1"
  when: endpoint.stdout.find(':8774') == -1

- name: Create nova admin endpoint
  shell: "source ~/admin-openrc && openstack endpoint create --region RegionOne compute admin http://{{ hostvars[groups['control'][0]].ansible_host }}:8774/v2.1"
  when: endpoint.stdout.find(':8774') == -1

- name: Create placement user
  shell: "source ~/admin-openrc && openstack user create --domain default --password {{ placement_os_pass }} placement"
  when: user_list.stdout.find('placement') == -1

- name: Check if placement user has admin role
  shell: "source ~/admin-openrc && openstack role assignment list --names"
  register: placement_role

- name: Add admin role to placement user
  shell: "source ~/admin-openrc && openstack role add --project service --user placement admin"
  when: placement_role.stdout.find('placement@Default') == -1

- name: Check if placement service already exists
  shell: "source ~/admin-openrc && openstack service list"
  register: placement_service

- name: Create placement service
  shell: 'source ~/admin-openrc && openstack service create --name placement --description "Placement API" placement'
  when: placement_service.stdout.find('placement') == -1

- name: Create placement public endpoint
  shell: "source ~/admin-openrc && openstack endpoint create --region RegionOne placement public http://{{ hostvars[groups['control'][0]].ansible_host }}:8778"
  when: endpoint.stdout.find(':8778') == -1

- name: Create placement internal endpoint
  shell: "source ~/admin-openrc && openstack endpoint create --region RegionOne placement internal http://{{ hostvars[groups['control'][0]].ansible_host }}:8778"
  when: endpoint.stdout.find(':8778') == -1

- name: Create placement admin endpoint
  shell: "source ~/admin-openrc && openstack endpoint create --region RegionOne placement admin http://{{ hostvars[groups['control'][0]].ansible_host }}:8778"
  when: endpoint.stdout.find(':8778') == -1
